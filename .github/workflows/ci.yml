name: Lambda Application CI workflow

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: ap-southeast-1
      BUILD_ROLE_ARN: arn:aws:iam::572512847063:role/GHA-Build-Role

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read Python version
        id: read-python-version
        run: printf "version=$(cat .python-version)\n" >> "$GITHUB_OUTPUT"

      - name: Install Python
        id: install-python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ steps.read-python-version.outputs.version }}"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-in-project: true

      - name: Restore Python virtual environment from cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.install-python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: Install project dependencies
        run: |
          poetry install --no-interaction --no-root
          poetry self add poetry-plugin-export
          poetry export --without-hashes --without dev -f requirements.txt > requirements.txt

      - name: Run tests
        run: |
          poetry run pytest

      - name: Get temporary credentials from AWS STS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.BUILD_ROLE_ARN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and publish docker image
        id: build-publish-docker
        env:
          DOCKER_REGISTRY_ENDPOINT: ${{ steps.login-ecr.outputs.registry }}
        run: |
          version=`poetry version`
          short_version=`poetry version --short`
          IMAGE_NAME=${version% $short_version}
          IMAGE_TAG=$short_version-build$GITHUB_RUN_NUMBER
          docker build --tag $DOCKER_REGISTRY_ENDPOINT/$IMAGE_NAME:$IMAGE_TAG .
          docker push --all-tags $DOCKER_REGISTRY_ENDPOINT/$IMAGE_NAME
          printf "IMAGE_NAME=$IMAGE_NAME\nIMAGE_TAG=$IMAGE_TAG\n" >> "$GITHUB_OUTPUT"

    outputs:
      IMAGE_NAME: ${{ steps.build-publish-docker.outputs.IMAGE_NAME }}
      IMAGE_TAG: ${{ steps.build-publish-docker.outputs.IMAGE_TAG }}

  post-build:
    needs: build
    runs-on: ubuntu-latest

    permissions: write-all

    env:
      IMAGE_NAME: "${{ needs.build.outputs.IMAGE_NAME }}"
      IMAGE_TAG: "${{ needs.build.outputs.IMAGE_TAG }}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Tag Github repo
        run: |
          GIT_TAG="v${{ env.IMAGE_TAG }}"
          git config --global user.email "github-action@users.noreply.github.com"
          git config --global user.name "Github Action"
          git tag -a "$GIT_TAG" -m "tagged by GHA $GIT_TAG"
          git push origin "$GIT_TAG"

      - name: Invoke CD workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          repo: kakarukeys/learn_lambda_docker
          ref: main
          workflow: cd.yml
          inputs: '{"env": "dev", "images": "{\"${{ env.IMAGE_NAME }}\": \"${{ env.IMAGE_TAG }}\"}"}'
          token: "${{ secrets.GITHUB_TOKEN }}"
